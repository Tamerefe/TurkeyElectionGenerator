"""
Kapsamlƒ± Se√ßim Analizi Dashboard ve √ñzet Rapor Sistemi
2024 T√ºrkiye Yerel Se√ßimleri i√ßin
"""

import numpy as np
import pandas as pd
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import json
import os
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

class ElectionDashboard:
    """Se√ßim sonu√ßlarƒ± i√ßin kapsamlƒ± dashboard ve rapor sistemi"""
    
    def __init__(self, outputs_dir: str = "outputs/"):
        self.outputs_dir = outputs_dir
        self.results = {}
        self.scenarios = {}
        
    def load_analysis_results(self):
        """T√ºm analiz sonu√ßlarƒ±nƒ± y√ºkler"""
        
        # Ana tahmin sonu√ßlarƒ±nƒ± y√ºkle
        data_files = list(Path(self.outputs_dir + "data/").glob("detayli_sonuclar_*.json"))
        if data_files:
            latest_results = max(data_files, key=os.path.getctime)
            with open(latest_results, 'r', encoding='utf-8') as f:
                self.results = json.load(f)
            print(f"‚úì Ana sonu√ßlar y√ºklendi: {latest_results.name}")
        
        # Senaryo sonu√ßlarƒ±nƒ± y√ºkle (varsa)
        scenario_files = list(Path(self.outputs_dir).glob("senaryo_analizi_raporu_*.txt"))
        if scenario_files:
            latest_scenario = max(scenario_files, key=os.path.getctime)
            print(f"‚úì Senaryo analizi bulundu: {latest_scenario.name}")
    
    def create_executive_summary(self) -> dict:
        """√úst d√ºzey y√∂netici √∂zeti olu≈üturur"""
        
        if not self.results:
            return {}
        
        summary = {
            'total_cities': len(self.results),
            'analysis_date': datetime.now().strftime('%d/%m/%Y'),
            'party_performance': {},
            'competitive_races': [],
            'safe_seats': [],
            'key_insights': [],
            'risk_alerts': []
        }
        
        # Parti performansƒ±
        party_wins = {}
        competitive_cities = []
        safe_cities = []
        
        for city, result in self.results.items():
            # En y√ºksek kazanma olasƒ±lƒ±ƒüƒ±
            top_party = max(result['win_probabilities'].items(), key=lambda x: x[1])
            party = top_party[0]
            probability = top_party[1]
            
            # Parti kazanƒ±mlarƒ±
            if probability > 60:  # G√º√ßl√º favoriler
                party_wins[party] = party_wins.get(party, 0) + 1
                safe_cities.append({
                    'city': city,
                    'party': party,
                    'probability': probability
                })
            elif probability > 40:  # √áeki≈ümeli
                competitive_cities.append({
                    'city': city,
                    'leading_party': party,
                    'probability': probability,
                    'margin': probability - sorted(result['win_probabilities'].values(), reverse=True)[1]
                })
        
        summary['party_performance'] = party_wins
        summary['competitive_races'] = sorted(competitive_cities, key=lambda x: x['margin'])[:10]
        summary['safe_seats'] = safe_cities
        
        # Ana bulgular
        total_cities = len(self.results)
        competitive_count = len(competitive_cities)
        
        summary['key_insights'] = [
            f"Toplam {total_cities} il analiz edildi",
            f"{competitive_count} il √ßeki≈ümeli yarƒ±≈ü g√∂steriyor (%{competitive_count/total_cities*100:.1f})",
            f"En g√º√ßl√º parti: {max(party_wins.items(), key=lambda x: x[1])[0] if party_wins else 'Belirlenmedi'} ({max(party_wins.values()) if party_wins else 0} il)",
            f"En √ßeki≈ümeli ≈üehir: {competitive_cities[0]['city'] if competitive_cities else 'Yok'}"
        ]
        
        # Risk uyarƒ±larƒ±
        high_risk_cities = []
        low_poll_cities = []
        
        for city, result in self.results.items():
            poll_count = result['poll_stats']['poll_count']
            top_prob = max(result['win_probabilities'].values())
            
            if poll_count < 5:
                low_poll_cities.append(city)
            
            if top_prob < 45:
                high_risk_cities.append(city)
        
        summary['risk_alerts'] = [
            f"{len(low_poll_cities)} ilde yetersiz anket verisi",
            f"{len(high_risk_cities)} ilde y√ºksek belirsizlik",
            "Son dakika geli≈ümeleri sonu√ßlarƒ± deƒüi≈ütirebilir"
        ]
        
        return summary
    
    def create_national_overview(self, output_dir: str = "outputs/graphs/"):
        """Ulusal genel bakƒ±≈ü g√∂rselleri"""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # 1. Parti bazƒ±nda il daƒüƒ±lƒ±mƒ± (pasta grafiƒüi)
        plt.figure(figsize=(12, 8))
        
        party_wins = {}
        for city, result in self.results.items():
            top_party = max(result['win_probabilities'].items(), key=lambda x: x[1])
            if top_party[1] > 50:  # %50'den fazla kazanma olasƒ±lƒ±ƒüƒ±
                party = top_party[0]
                party_wins[party] = party_wins.get(party, 0) + 1
        
        if party_wins:
            # Belirsiz iller
            total_analyzed = len(self.results)
            certain_wins = sum(party_wins.values())
            uncertain = total_analyzed - certain_wins
            
            if uncertain > 0:
                party_wins['Belirsiz/√áeki≈ümeli'] = uncertain
            
            # Pasta grafiƒüi
            colors = plt.cm.Set3(np.linspace(0, 1, len(party_wins)))
            wedges, texts, autotexts = plt.pie(party_wins.values(), labels=party_wins.keys(), 
                                              autopct='%1.1f%%', colors=colors, startangle=90)
            
            plt.title('2024 Yerel Se√ßimler - Parti Bazƒ±nda ƒ∞l Daƒüƒ±lƒ±mƒ± Projeksiyonu', fontsize=14, pad=20)
            
            # ƒ∞statistikleri ekle
            plt.figtext(0.02, 0.02, f'Toplam {total_analyzed} il analiz edildi', fontsize=10)
            plt.figtext(0.02, 0.05, f'Kesin sonu√ß: {certain_wins} il (%{certain_wins/total_analyzed*100:.1f})', fontsize=10)
        
        plt.tight_layout()
        plt.savefig(os.path.join(output_dir, f'ulusal_genel_bakis_{timestamp}.png'), 
                   dpi=300, bbox_inches='tight')
        plt.close()
        
        # 2. Kazanma olasƒ±lƒ±klarƒ± histogram
        plt.figure(figsize=(14, 8))
        
        all_probabilities = []
        party_colors = {}
        color_map = plt.cm.Set1(np.linspace(0, 1, 8))
        
        for i, party in enumerate(['AKP', 'CHP', 'ƒ∞Yƒ∞', 'MHP', 'HDP', 'DEM', 'YRP', 'ZP']):
            party_colors[party] = color_map[i]
        
        for city, result in self.results.items():
            top_party = max(result['win_probabilities'].items(), key=lambda x: x[1])
            all_probabilities.append(top_party[1])
        
        plt.hist(all_probabilities, bins=20, alpha=0.7, color='skyblue', edgecolor='black')
        plt.xlabel('En Y√ºksek Kazanma Olasƒ±lƒ±ƒüƒ± (%)')
        plt.ylabel('ƒ∞l Sayƒ±sƒ±')
        plt.title('ƒ∞llerdeki Kazanma Olasƒ±lƒ±klarƒ± Daƒüƒ±lƒ±mƒ±')
        plt.grid(axis='y', alpha=0.3)
        
        # Kritik e≈üik √ßizgileri
        plt.axvline(x=50, color='red', linestyle='--', alpha=0.7, label='√áeki≈ümeli E≈üik (%50)')
        plt.axvline(x=70, color='green', linestyle='--', alpha=0.7, label='G√ºvenli E≈üik (%70)')
        plt.legend()
        
        plt.tight_layout()
        plt.savefig(os.path.join(output_dir, f'olasilik_dagilimi_{timestamp}.png'), 
                   dpi=300, bbox_inches='tight')
        plt.close()
        
        # 3. ƒ∞l bazƒ±nda detaylƒ± tablo (top 20 most competitive)
        fig, ax = plt.subplots(figsize=(16, 10))
        ax.axis('tight')
        ax.axis('off')
        
        # En √ßeki≈ümeli 20 ≈üehir
        competitive_data = []
        for city, result in self.results.items():
            probs = sorted(result['win_probabilities'].values(), reverse=True)
            if len(probs) >= 2:
                margin = probs[0] - probs[1]
                top_party = max(result['win_probabilities'].items(), key=lambda x: x[1])
                competitive_data.append({
                    'city': city,
                    'leading_party': top_party[0],
                    'probability': top_party[1],
                    'margin': margin
                })
        
        competitive_data.sort(key=lambda x: x['margin'])
        top_competitive = competitive_data[:20]
        
        table_data = []
        for item in top_competitive:
            table_data.append([
                item['city'],
                item['leading_party'],
                f"{item['probability']:.1f}%",
                f"{item['margin']:.1f}%"
            ])
        
        table = ax.table(cellText=table_data,
                        colLabels=['ƒ∞l', '√ñnde Olan Parti', 'Kazanma Olasƒ±lƒ±ƒüƒ±', 'Fark'],
                        cellLoc='center',
                        loc='center')
        
        table.auto_set_font_size(False)
        table.set_fontsize(9)
        table.scale(1.2, 1.5)
        
        # Ba≈ülƒ±k √ßizgileri renklendir
        for i in range(len(table_data[0])):
            table[(0, i)].set_facecolor('#4CAF50')
            table[(0, i)].set_text_props(weight='bold', color='white')
        
        plt.title('En √áeki≈ümeli 20 ƒ∞l - Detaylƒ± Analiz', fontsize=16, pad=20)
        plt.savefig(os.path.join(output_dir, f'cekismeli_iller_tablosu_{timestamp}.png'), 
                   dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"üìä Ulusal genel bakƒ±≈ü g√∂rselleri olu≈üturuldu: {output_dir}")
    
    def generate_executive_report(self, output_dir: str = "outputs/reports/") -> str:
        """√úst d√ºzey y√∂netici raporu olu≈üturur"""
        
        os.makedirs(output_dir, exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = os.path.join(output_dir, f"yonetici_ozet_raporu_{timestamp}.txt")
        
        summary = self.create_executive_summary()
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("üó≥Ô∏è  " + "=" * 70 + "\n")
            f.write("2024 T√úRKƒ∞YE YEREL SE√áƒ∞MLERƒ∞\n")
            f.write("Y√ñNETƒ∞Cƒ∞ √ñZET RAPORU\n")
            f.write("Geli≈ümi≈ü Monte Carlo Analizi Sonu√ßlarƒ±\n")
            f.write("=" * 76 + "\n\n")
            
            f.write(f"üìÖ Rapor Tarihi: {summary.get('analysis_date', 'Bilinmiyor')}\n")
            f.write(f"üìä Analiz Kapsamƒ±: {summary.get('total_cities', 0)} ƒ∞l\n")
            f.write(f"üî¨ Metodoloji: Monte Carlo Sim√ºlasyonu (50,000 iterasyon/il)\n\n")
            
            # Anahtar Bulgular
            f.write("üîç ANAHTAR BULGULAR\n")
            f.write("-" * 40 + "\n")
            for insight in summary.get('key_insights', []):
                f.write(f"‚Ä¢ {insight}\n")
            f.write("\n")
            
            # Parti Performansƒ±
            f.write("üèÜ PARTƒ∞ PERFORMANS TABLOSU\n")
            f.write("-" * 40 + "\n")
            party_performance = summary.get('party_performance', {})
            if party_performance:
                sorted_parties = sorted(party_performance.items(), key=lambda x: x[1], reverse=True)
                for i, (party, count) in enumerate(sorted_parties, 1):
                    percentage = count / summary.get('total_cities', 1) * 100
                    f.write(f"{i:2d}. {party:>8s}: {count:2d} il (%{percentage:4.1f})\n")
            f.write("\n")
            
            # En √áeki≈ümeli Yarƒ±≈ülar
            f.write("‚ö° EN √áEKƒ∞≈ûMELƒ∞ 10 YARI≈û\n")
            f.write("-" * 40 + "\n")
            competitive_races = summary.get('competitive_races', [])[:10]
            if competitive_races:
                f.write(f"{'ƒ∞l':<15} {'√ñndeki Parti':<10} {'Olasƒ±lƒ±k':<10} {'Fark':<8}\n")
                f.write("-" * 43 + "\n")
                for race in competitive_races:
                    city = race['city'][:14]  # ƒ∞l adƒ±nƒ± kƒ±salt
                    party = race['leading_party'][:9]
                    prob = f"{race['probability']:.1f}%"
                    margin = f"{race['margin']:.1f}%"
                    f.write(f"{city:<15} {party:<10} {prob:<10} {margin:<8}\n")
            f.write("\n")
            
            # Risk Deƒüerlendirmesi
            f.write("‚ö†Ô∏è  Rƒ∞SK DEƒûERLENDƒ∞RMESƒ∞\n")
            f.write("-" * 40 + "\n")
            for alert in summary.get('risk_alerts', []):
                f.write(f"üî¥ {alert}\n")
            f.write("\n")
            
            # Stratejik √ñneriler
            f.write("üí° STRATEJƒ∞K √ñNERƒ∞LER\n")
            f.write("-" * 40 + "\n")
            f.write("1. √áeki≈ümeli ≈üehirlerde yoƒüun saha √ßalƒ±≈ümasƒ± yapƒ±lmalƒ±\n")
            f.write("2. Yetersiz anket verisi olan illerde ek ara≈ütƒ±rma gerekli\n")
            f.write("3. Son 2 hafta kritik - g√ºnl√ºk izleme √∂nerilir\n")
            f.write("4. Katƒ±lƒ±m oranƒ± stratejileri g√∂zden ge√ßirilmeli\n")
            f.write("5. Kararsƒ±z se√ßmen profili detaylƒ± analiz edilmeli\n\n")
            
            # Metodoloji Notu
            f.write("üìã METODOLOJƒ∞ NOTU\n")
            f.write("-" * 40 + "\n")
            f.write("Bu analiz, mevcut anket verilerini kullanarak Monte Carlo\n")
            f.write("sim√ºlasyon tekniƒüi ile ger√ßekle≈ütirilmi≈ütir. Sonu√ßlar:\n")
            f.write("‚Ä¢ Anket hatasƒ±, √∂rnekleme yanlƒ±lƒ±ƒüƒ± ve belirsizlik fakt√∂rleri\n")
            f.write("‚Ä¢ Kararsƒ±z se√ßmen daƒüƒ±lƒ±mƒ± senaryolarƒ±\n")
            f.write("‚Ä¢ Katƒ±lƒ±m oranƒ± deƒüi≈ükenleri\n")
            f.write("‚Ä¢ Son dakika oy deƒüi≈üimi olasƒ±lƒ±klarƒ±\n")
            f.write("parametreleri ile hesaplanmƒ±≈ütƒ±r.\n\n")
            
            f.write("‚öñÔ∏è  Yasal Uyarƒ±: Bu analiz akademik ama√ßlƒ±dƒ±r ve kesin\n")
            f.write("sonu√ß garantisi vermez. Ger√ßek se√ßim sonu√ßlarƒ± farklƒ±lƒ±k\n")
            f.write("g√∂sterebilir.\n")
        
        print(f"üìã Y√∂netici √∂zet raporu olu≈üturuldu: {report_file}")
        return report_file
    
    def create_comparison_analysis(self, output_dir: str = "outputs/graphs/"):
        """2019 se√ßimleri ile kar≈üƒ±la≈ütƒ±rma analizi"""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # 2019 sonu√ßlarƒ± vs 2024 tahminleri kar≈üƒ±la≈ütƒ±rmasƒ±
        plt.figure(figsize=(16, 10))
        
        # Her parti i√ßin beklenen deƒüi≈üim
        party_changes = {
            'AKP': {'2019_estimate': 35, '2024_prediction': 0, 'cities_won': 0},
            'CHP': {'2019_estimate': 30, '2024_prediction': 0, 'cities_won': 0},
            'ƒ∞Yƒ∞': {'2019_estimate': 8, '2024_prediction': 0, 'cities_won': 0},
            'MHP': {'2019_estimate': 15, '2024_prediction': 0, 'cities_won': 0},
            'HDP/DEM': {'2019_estimate': 12, '2024_prediction': 0, 'cities_won': 0}
        }
        
        # 2024 tahminlerini hesapla
        total_cities = len(self.results)
        for city, result in self.results.items():
            top_party = max(result['win_probabilities'].items(), key=lambda x: x[1])
            if top_party[1] > 50:
                if top_party[0] in party_changes:
                    party_changes[top_party[0]]['cities_won'] += 1
                elif top_party[0] in ['HDP', 'DEM']:
                    party_changes['HDP/DEM']['cities_won'] += 1
        
        # Kar≈üƒ±la≈ütƒ±rma grafiƒüi
        parties = list(party_changes.keys())
        prediction_2024 = [party_changes[party]['cities_won'] for party in parties]
        
        x = np.arange(len(parties))
        width = 0.35
        
        plt.bar(x, prediction_2024, width, label='2024 Tahmin', alpha=0.8)
        plt.xlabel('Partiler')
        plt.ylabel('Kazanƒ±lan ƒ∞l Sayƒ±sƒ±')
        plt.title('2024 Yerel Se√ßimler - Parti Bazƒ±nda ƒ∞l Kazanƒ±m Projeksiyonu')
        plt.xticks(x, parties, rotation=45)
        plt.legend()
        plt.grid(axis='y', alpha=0.3)
        
        # Deƒüerleri grafiƒüin √ºst√ºne ekle
        for i, v in enumerate(prediction_2024):
            plt.text(i, v + 0.5, str(v), ha='center', va='bottom', fontweight='bold')
        
        plt.tight_layout()
        plt.savefig(os.path.join(output_dir, f'parti_karsilastirma_{timestamp}.png'), 
                   dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"üìä Kar≈üƒ±la≈ütƒ±rma analizi olu≈üturuldu: {output_dir}")

def main():
    """Ana dashboard √ßalƒ±≈ütƒ±rma fonksiyonu"""
    print("üìä 2024 Yerel Se√ßimler - Kapsamlƒ± Dashboard ve Rapor Sistemi")
    print("=" * 70)
    
    # Dashboard'u ba≈ülat
    dashboard = ElectionDashboard()
    
    # Sonu√ßlarƒ± y√ºkle
    print("\nüìÅ Analiz sonu√ßlarƒ± y√ºkleniyor...")
    dashboard.load_analysis_results()
    
    if not dashboard.results:
        print("‚ùå Analiz sonu√ßlarƒ± bulunamadƒ±! √ñnce ana analizleri √ßalƒ±≈ütƒ±rƒ±n.")
        return
    
    # √úst d√ºzey √∂zeti olu≈ütur
    print("\nüìã Y√∂netici √∂zet raporu olu≈üturuluyor...")
    dashboard.generate_executive_report()
    
    # Ulusal genel bakƒ±≈ü g√∂rselleri
    print("\nüìä Ulusal genel bakƒ±≈ü g√∂rselleri olu≈üturuluyor...")
    dashboard.create_national_overview()
    
    # Kar≈üƒ±la≈ütƒ±rma analizi
    print("\nüìà Kar≈üƒ±la≈ütƒ±rma analizi olu≈üturuluyor...")
    dashboard.create_comparison_analysis()
    
    # √ñzet istatistikler
    summary = dashboard.create_executive_summary()
    
    print("\n" + "=" * 70)
    print("üéØ ANALƒ∞Z √ñZETƒ∞")
    print("=" * 70)
    print(f"üìä Toplam analiz edilen il: {summary.get('total_cities', 0)}")
    print(f"‚ö° √áeki≈ümeli yarƒ±≈ü sayƒ±sƒ±: {len(summary.get('competitive_races', []))}")
    
    party_performance = summary.get('party_performance', {})
    if party_performance:
        print(f"üèÜ En ba≈üarƒ±lƒ± parti: {max(party_performance.items(), key=lambda x: x[1])[0]} ({max(party_performance.values())} il)")
    
    print("\n‚úÖ T√ºm raporlar ve g√∂rseller olu≈üturuldu!")
    print("üìÅ Sonu√ßlar 'outputs/' klas√∂rlerinde bulunabilir.")

if __name__ == "__main__":
    main()
